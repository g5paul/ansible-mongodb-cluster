---
#This Playbook configures the mongos service of mongodb

- name: Create the mongos server startup file
  tags: [mongos]
  template: src=mongos.service.j2 dest=/etc/systemd/system/mongos.service mode=0644 seuser=system_u

- name: Copy the keyfile for authentication
  tags: [mongos]
  copy:
    src: roles/mongod/files/secret
    dest: "{{ mongodb_datadir_prefix }}/secret"
    owner: mongod
    group: mongod
    mode: 0400
    setype: mongod_var_lib_t

- name: Create the mongos server configuration file
  tags: [mongos]
  template: src=mongos.conf.j2 dest=/etc/mongos.conf
  notify: restart mongos

- name: Start the mongos server service
  tags: [mongos]
  systemd: name=mongos state=started daemon_reload=yes enabled=yes

- wait_for:
    port: "{{ mongos_port }}"
    delay: 3

- name: Copy the file to add users to mongos
  tags: [mongos, mongos-add-users]
  template: src=add_users.js.j2 dest=/tmp/add_users.js
  when: "inventory_hostname == groups['mongos_servers'][0]"

#- name: Check if some user is not there already - try to get user list as anonymous
#  tags: [mongos, mongos-add-users]
#  shell: /usr/bin/mongo "localhost:{{ mongos_port }}/admin" --eval 'db.getUsers()'
#  ignore_errors: true
#  register: getusers
#  changed_when: false

- name: Add users to mongos
  tags: [mongos, mongos-add-users]
  shell: /usr/bin/mongo "localhost:{{ mongos_port }}/admin" /tmp/add_users.js
  when: "inventory_hostname == groups['mongos_servers'][0] and mongo_addusers==true"
  register: mongos_add_users_result
  ignore_errors: true
#  when: "inventory_hostname == groups['mongos_servers'][0] and getusers.rc ==0"

- debug:
    var: mongos_add_users_result
    verbosity: 1

#- name: Run without authentication
#  mongodb_user:
#    database: admin
#    name: "admin"
#    password: "{{ mongo_admin_pass }}"
#    state: present
#    login_port: "{{ mongos_port }}"
#    roles: "readWriteAnyDatabase, dbAdminAnyDatabase, userAdminAnyDatabase, clusterAdmin, restore, backup"
#  when: getusers.rc ==0

#- name: Run with authentication
#  mongodb_user:
#    database: admin
#    name: "admin"
#    password: "{{ mongo_admin_pass }}"
#    state: present
#    login_port: "{{ mongos_port }}"
#    roles: "readWriteAnyDatabase, dbAdminAnyDatabase, userAdminAnyDatabase, clusterAdmin, restore, backup"
#    login_database: admin
#    login_user: "admin"
#    login_password: "{{ mongo_admin_pass }}"
#  when: getusers.rc != 0

- name: Copy the file to setup sharding
  tags: [mongos, mongos-setup-sharding]
  template: src=mongos_init.js.j2 dest=/tmp/mongos_init.js
  when: "inventory_hostname == groups['mongos_servers'][0]"

- name: Create sharding
  tags: [mongos, mongos-setup-sharding]
  shell: /usr/bin/mongo "localhost:{{ mongos_port }}/admin"  /tmp/mongos_init.js -u admin -p {{mongo_admin_pass}}
  register: mongos_setup_sharding_result
  when: "inventory_hostname == groups['mongos_servers'][0]"

- debug:
    var: mongos_setup_sharding_result
    verbosity: 1

